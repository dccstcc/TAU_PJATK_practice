version: 2

jobs:
  # Build Website
  doc:
    working_directory: ~/dccstcc/dmp-docs
    docker:
    - image: circleci/openjdk:11
    steps:
    - checkout
    - run:
        command: |
          git config --global user.email "dccstcc@gmail.com"
          git config --global user.name "dccstcc"
    - run: ./doc/ci-docs.sh

  # Run unit tests
  build:
    working_directory: ~/dccstcc/docker-maven-plugin
    docker:
    - image: circleci/openjdk:11
    steps:
    - checkout
    - restore_cache:
        key: dmp-{{ checksum "pom.xml" }}
    - run: mvn install -Pjacoco
    - run: bash <(curl -s https://codecov.io/bash)
    - save_cache:
        key: dmp-{{ checksum "pom.xml" }}
        paths:
        - ~/.m2

  # Run integration tests
  e2e-tests:
    working_directory: ~/dccstcc/docker-maven-plugin
    machine: true
    steps:
    - checkout
    - restore_cache:
        key: dmp-{{ checksum "pom.xml" }}
    - run:
        command: |
          mvn clean install -DskipTests
          cd it/
          mvn clean install
    - save_cache:
        key: dmp-{{ checksum "pom.xml" }}
        paths:
        - ~/.m2

  run_tests:
      working_directory: ~/dccstcc/
      docker:
      - image: circleci/openjdk:11
      steps:
      - checkout
      # - restore_cache:
      #     key: dmp-sonar-pr-{{ checksum "pom.xml" }}
      - run: |
          mvn test
      # - save_cache:
      #     paths:
      #     - ~/.m2

  sonar-pr:
    working_directory: ~/dccstcc/dmp-sonar-pr
    docker:
    - image: circleci/openjdk:11
    steps:
    - checkout
    - restore_cache:
        key: dmp-sonar-pr-{{ checksum "pom.xml" }}
    - run: |
        if [ -n "${CIRCLE_PR_NUMBER}" ]; then
          mvn clean -Pjacoco,sonar org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar \
             -Dsonar.pullrequest.base=master \
             -Dsonar.pullrequest.branch=${CIRCLE_BRANCH} \
             -Dsonar.pullrequest.key=${CIRCLE_PR_NUMBER} \
             -Dsonar.pullrequest.provider=GitHub \
             -Dsonar.pullrequest.github.repository=fabric8io/docker-maven-plugin \
             -Dsonar.github.oauth=${GITHUB_COMMENT_TOKEN}
        else
          echo "No Sonar PR analysis as this is not a pull request"
        fi
    - save_cache:
        key: dmp-sonar-pr-{{ checksum "pom.xml" }}
        paths:
        - ~/.m2

  sonar:
    working_directory: ~/dccstcc/dmp-sonar
    docker:
    - image: circleci/openjdk:11
    steps:
    - checkout
    - restore_cache:
        key: dmp-sonar-{{ checksum "pom.xml" }}
    - run: |
        mvn clean -Pjacoco,sonar org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar
    - save_cache:
        key: dmp-sonar-{{ checksum "pom.xml" }}
        paths:
        - ~/.m2

workflows:
  version: 2
  all:
    jobs:
    - run_tests:
        filters:
          branches:
            only: master

    # - build
    # - e2e-tests
    # - sonar-pr
    # - sonar:
    #     filters:
    #       branches:
    #         only: master


# version: 2
# jobs:
#   build:
#     working_directory: /lab_1_3_JUnit_Mockito/

#     docker:
#       - image: circleci/openjdk:8-jdk-stretch

#     steps:
#       - checkout

#       - run:
#           name: Generate cumulative pom.xml checksum
#           command: |
#             find . -type f -name "pom.xml" -exec sh -c "sha256sum {} >> ~/pom-checksum.tmp" \;
#             sort -o ~/pom-checksum ~/pom-checksum.tmp
#           when: always

#       - restore_cache:
#           keys:
#             - my-multi-module-mvn-prj-{{ checksum "~/pom-checksum" }}
#             - my-multi-module-mvn-prj-

#       - run: mvn de.qaware.maven:go-offline-maven-plugin:resolve-dependencies

#       - save_cache:
#           paths:
#             - ~/.m2
#           key: my-multi-module-mvn-prj-{{ checksum "~/pom-checksum" }}

#       - run: mvn package

      # - run:
      #     name: Save test results
      #     command: |
      #       # mkdir -p ~/test-results/junit/
      #       mkdir -p ~/
      #       find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
      #     when: always

      # - store_test_results:
      #     path: ~/test-results

      # - store_artifacts:
      #     path: my-service/target/my-service.jar

# # This code is licensed from CircleCI to the user under the MIT license.
# # See here for details: https://circleci.com/developer/orbs/licensing
# version: 2.1
# description: "Maven common tasks"

# commands:
#   with_cache:
#     description: Run a set of steps with Maven dependencies cached.
#     parameters:
#       settings_file:
#         description: Specify a custom settings file to use (optional)
#         type: string
#         default: ""
#       mvn_path:
#         description: Specify a custom path to maven
#         type: string
#         default: mvn
#       steps:
#         description: Commands to execute between cache restore and save
#         type: steps
#       force_download:
#         description: Wheter to preemptively download all dependencies
#         type: boolean
#         default: true
#     steps:
#       - run:
#           name: Generate Cache Checksum
#           command: find . -name 'pom.xml' | sort | xargs cat > /tmp/maven_cache_seed
#       - restore_cache:
#           key: maven-{{ checksum "/tmp/maven_cache_seed" }}
#       - run:
#           name: Setup artifactory from ci-conf if present
#           command: |
#             FILE="$GIT_ROOT/ci-conf/mvn/settings.xml"
#             if [ -f "$FILE" ]; then
#               mkdir -v -p ~/.m2
#               cp -v $FILE ~/.m2
#             fi
#       - when:
#           condition: << parameters.force_download >>
#           steps:
#             - run:
#                 name: Install Dependencies
#                 command: << parameters.mvn_path >> dependency:go-offline <<# parameters.settings_file >> --settings << parameters.settings_file >><</ parameters.settings_file >>
#       - steps: << parameters.steps >>
#       - save_cache:
#           paths:
#             - ~/.m2
#           key: maven-{{ checksum "/tmp/maven_cache_seed" }}

#   aggregate_test_results:
#     description: Aggregates test results in a multi-module maven project and store for the build.
#     steps:
#       - run:
#           name: Copy test results
#           when: always
#           command: |
#             mkdir -p /tmp/surefire/
#             find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} /tmp/surefire/ \;
#       - store_test_results:
#           path: /tmp/surefire/


# # version: 2.0
# # description: |
# #   Checkout, build, test, and upload test results for a Maven project.
# # executor: <<parameters.executor>>
# # parameters:
# #   app_src_directory:
# #     description: Useful when the source of your maven project is nott in the root directory of your git repo. Supply the name of the directory or relative path of the directory containing your source code.
# #     type: string
# #     default: '/lab_1_3_JUnit_Mockito/'
# #   executor:
# #     description: The name of custom executor to use
# #     type: executor
# #     default: default
# #   command:
# #     description: The maven command to run.
# #     type: string
# #     default: verify
# #   test_results_path:
# #     description: The path to the test results.
# #     type: string
# #     default: target/surefire-reports
# #   settings_file:
# #     description: Specify a custom settings file to use (optional)
# #     type: string
# #     default: ""
# #   maven_command:
# #     description: Specify a custom path for invoking maven
# #     type: string
# #     default: mvn

# # jobs:
# #   build:
# #     docker: 
# #       - image: ubuntu:20.04
# #     steps:
# #       - checkout
# #       - steps:
# #           settings_file: << parameters.settings_file >>
# #           app_src_directory: << parameters.app_src_directory >>
# #           maven_command: << parameters.maven_command >>
# #           steps:
# #             - run:
# #                 name: Run Tests
# #                 working_directory: << parameters.app_src_directory >>
# #                 command: |
# #                   if [ -n "<< parameters.settings_file >>" ]; then
# #                     set -- "$@" --settings "<< parameters.settings_file >>"
# #                   fi
# #                   << parameters.maven_command >> << parameters.command >> "$@"
# #       - process_test_results:
# #           test_results_path: << parameters.test_results_path >>


# # # # version: 2.0

# # # # jobs:
# # # #   build:
# # # #     docker:
# # # #       - image: cimg/openjdk:17.0.1
# # # #         auth:
# # # #           username: mydockerhub-user
# # # #           password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
# # # #     steps:
# # # #       - checkout
# # # #       - run: ../lab_1_3_JUnit_Mockito/mvn package

# # # orbs: 
# # #   maven: circleci/maven@1.3.0
# # # version: 2.1

# # # ## Define the jobs we want to run for this project
# # # jobs:
# # #   build:
# # #     docker:
# # #       - image: ubuntu:20.04
# # #     steps:
# # #       - attach_workspace:
# # #           at: . # relative path to our working directory
# # #       - run: 
# # #           command: |
# # #               ls -la ~/project
# # #               ls -la ../../bin/bash
# # #               cd ../../ && whereis Dockerfile
# # #               echo $pwd
# # #               cd ~/../lab_1_3_JUnit_Mockito
# # #               mvn clean package

# # #   test:
# # #     docker:
# # #       - image: ubuntu:20.04
# # #     steps:
# # #       - attach_workspace:
# # #           at: . # relative path to our working directory
# # #       - run: 
# # #           command: |
# # #               cd ~/../lab_1_3_JUnit_Mockito
# # #               mvn test

# # # # Orchestrate our job run sequence
# # # workflows:
# # #   build_and_test:
# # #     jobs:
# # #       - build
# # #       - test
